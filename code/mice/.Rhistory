RL1[is.na(RL1$Utilization),]
is.na(RL1$Utilization)
#another way to add component <- add all hours where utilization os unknown
RL1[is.na(RL1$Utilization),"PosixTime"]
#another way to add component <- add all hours where utilization os unknown
list_rl1$UnknownHours <- RL1[is.na(RL1$Utilization),"PosixTime"]
list_rl1
list_rl1[15] <- "New Information"
list_rl1
list_rl1[4] <- "New Information"
list_rl1
list_rl1 <- list("RL1",util_stats_rl1,util_under_90_flag)
list_rl1
list_rl1
list_rl1[4] <- "New Information"
list_rl1
list_rl1 <- list(Machine="RL1",
Stats=util_stats_rl1,
LowThreshold=util_under_90_flag)
list_rl1
list_rl1
list_rl1[4] <- "New Information"
list_rl1
list_rl1$UnknownHours <- RL1[is.na(RL1$Utilization),"PosixTime"]
list_rl1
#delete element from list
list_rl1[4] <- NULL
list_rl1
#add df to list
RL1
list_rl1$Data <- RL1
list_rl1
#subsetting list
list_rl1[1:3]
#subsetting list
list_rl1[1:6]
#subsetting list <- access the first element of UnknownHours
list_rl1
#subsetting list <- access the first element of UnknownHours
list_rl1$UnknownHours[1]
list_rl1[[3]]
list_rl1[[4]]
list_rl1[[4]][1]
#subsetting list <- access the first element of UnknownHours in two versions
list_rl1$UnknownHours[1]
list_rl1[[4]][1]
#subsetting list
list_rl1[c(1:10)]
#subsetting list
list_rl1[1]
#subsetting list
list_rl1[1:2]
#subsetting list
typeof(list_rl1[1:2])
#visualization
library(ggplot2)
plot <- ggplot(data=util)
plot+geom_line(aes(x=PosixTime,y=Utilization))
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine))
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90,
color="Gray",
size=1.2)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90,
color="Gray",
size=1.2,
linetype=3)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90,
color="Gray")
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90,
color="Gray",
size=1.2)
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
head(Chicago)
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
head(Chicago,n=2)
head(NewYork,n=2)
head(Houston,n=2)
head(SanFrancisco,n=2)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
is.matrix(Chicago)
is.matrix(NewYork)
is.matrix(Houston)
is.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
#test our list
Weather[[3]]
#test our list
Weather[3]
#test our list
Weather$Houston
?apply
apply(x=Chicago,
MARGIN=1,
FUN=mean())
apply(Chicago,
MARGIN=1,
FUN=mean())
apply(Chicago,1,mean)
apply(Chicago,1,mean())
apply(x=Chicago,MARGIN=1,FUN=mean)
apply(x=Chicago,margin=1,fun=mean)
apply(Chicago,margin=1,fun=mean)
apply(Chicago,1,fun=mean)
apply(Chicago,1,mean)
#the syntax is apply(matrix, row/column, function)
apply(Chicago,1,max)
#the syntax is apply(matrix, row/column, function)
apply(Chicago,1,min)
apply(Chicago,1,mean)
apply(NewYork,1,mean)
apply(Houston,1,mean)
apply(SanFrancisco,1,mean)
#read data
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
Chicago
t(Chicago)
#apply transpose t() function to all elements of my Weather list
list(t(Weather$Chicago)
t(Weather$NewYork)
#apply transpose t() function to all elements of my Weather list
list(t(Weather$Chicago),
t(Weather$NewYork),
t(Weather$Houston),
t(Weather$SanFrancisco))
#apply transpose t() function to all elements of my Weather list
lapply(Weather,t)
list(t(Weather$Chicago),
t(Weather$NewYork),
t(Weather$Houston),
t(Weather$SanFrancisco))==lapply(Weather,t)
lapply(Weather, rbind, NewRow=1:12)
#using lapply with []
lapply(Weather, "[",1,1)
#using lapply with []
lapply(Weather, "[",1,)
#read data
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
lapply(Weather,function(x) x[1,])
#in this case x is an element of a list
lapply(Weather,function(x) x)
#in this case x is an element of a list
lapply(Weather,function(x) x[1,] - x[2,])
#read data
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
Weather
lapply(Weather,"[",1,7)
#AvgHigh_F for July with sapply() function
sapply(Weather,"[",1,7)
lapply(Weather,"[",1,10:12)
sapply(Weather,"[",1,10:12)
lapply(Weather,"[",1,10:12)
sapply(Weather,"[",1,10:12)
lapply(Weather,function(x) round((z[1,]-z[2,])/z[2,],2))
lapply(Weather,function(x) round((x[1,]-z[2,])/z[2,],2))
lapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2))
lapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2))
sapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2))
#it is possible to unable sapply() from simplification
#in this case it behaves as lapply() function
lapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2))
sapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2), simplify=FALSE)
#read data
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
Chicago
apply(Chicago,1,max)
#we would like to apply the above line to all the list elements
lapply(Weather,apply,1,max)
#this is identical of the above mentioned line (maybe a bit easier to understand!)
lapply(Weather, function(x) apply(x,1,max))
library(biomaRt)
library(biomaRt)
ensembl <- useEnsembl(biomart='genes',
mirror='useast')
head(listDatasets(ensembl))
ensembl <- useEnsembl(biomart='genes',
dataset='mmusculus_gene_ensembl',
mirror='useast')
head(listAttributes(ensembl))
listAttributes(ensembl)
#load required libraries
library(DESeq2)
library(gplots)
library(biomaRt)
library(ggplot2)
library(pheatmap)
library(pathview)
library(ggridges)
library(ggnewscale)
library(enrichplot)
library(EnhancedVolcano)
library(clusterProfiler)
#get working directory
if (getwd()!="/Users/birobalint/Documents/Projects/lda_rna_seq/code/"){
setwd("/Users/birobalint/Documents/Projects/lda_rna_seq/code/")
}
print(getwd())
#load data
gene_counts <- read.csv('../results/gene_counts.csv',
sep=',')
colnames(gene_counts) <- c('gene_id','1','3','4','6','7','8','9')
head(gene_counts)
#create metadata table
metadata <- as.data.frame(cbind(idx=colnames(gene_counts)[c(-1)],
condition=c('control','control','lda','lda','lda','lda','lda'),
age=c('a','a','a','j','j','j','j'),
genotype1=c('T/C','T/C','T/C','T/C','T/T','C/C','C/C'),
genotype2=c('HE','HE','HE','HE','WT','HO','HO')))
metadata
#create deseq matrix for condition
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=metadata,
design=~condition, tidy=TRUE)
d.dds <- DESeq(dds)
#transofrm deseq data
vs_cond_data <- varianceStabilizingTransformation(d.dds)
#visualize PCA
plotPCA(vs_cond_data,intgroup=c('condition'))
#create Ensembl query
ensembl <- useEnsembl(biomart='genes',
dataset='btaurus_gene_ensembl',
mirror='uswest')
#get data
gene_names <- getBM(attributes=c('external_gene_name','ensembl_gene_id'),
filters=c('ensembl_gene_id'),
values=gene_counts$gene_id,
mart=ensembl)
res <- results(d.dds,
contrast=c('condition','lda','control'))
res <- lfcShrink(d.dds,
contrast=c('condition','lda','control'),
res=res,
type='normal')
#visualize volcano plot
EnhancedVolcano(res,
lab=gene_names$external_gene_name,
title='',
x='log2FoldChange',
y='pvalue',
xlim=c(-6,6),
ylim=c(0,10))
res
res$log2FoldChange
names(res$log2FoldChange) <- names(res)
res$log2FoldChange
res
genes <- names(res)
genes
genes <- rwnames(res)
genes <- rownames(res)
genes
trial <- cbind(c(gene_names$external_gene_name,res$log2FoldChange))
trial
head(trial)
trial <- cbind(c(gene_names$external_gene_name,res$log2FoldChange)
trial <- cbind(gene_names$external_gene_name,res$log2FoldChange)
trial <- cbind(gene_names$external_gene_name,res$log2FoldChange)
trial
typeof(trial)
class(trial)
order(trial)
trial <- cbind(gene_name=gene_names$external_gene_name,fc=res$log2FoldChange)
trial
colnames(trial)
trial['gene_name']
res
order(res$log2FoldChange)
res[order(res$log2FoldChange),]
sorted <- res[order(res$log2FoldChange),]
sorted
rownames(sorted)
ensembl <- useEnsembl(biomart='genes',
dataset='btaurus_gene_ensembl',
mirror='uswest')
sorted_gene_names <- getBM(attributes=c('external_gene_name','ensembl_gene_id'),
filters=c('ensembl_gene_id'),
values=gene_counts$gene_id,
mart=ensembl)
sorted_gene_names
sorted
sorted$log2FoldChange
sorted$log2FoldChange[-c(1,2,3)]
sorted$log2FoldChange[c(-1,-2,-3)]
sapply(sorted$log2FoldChange,tail,10)
tail(sorted$log2FoldChange)
tail(sorted$log2FoldChange,n=30)
tail(sorted$log2FoldChange,n=300)
tail(sorted$log2FoldChange,n=3000)
tail(sorted$log2FoldChange,n=3000)
sorted
sorted[!is.na(sorted$log2FoldChange),]
sorted <- sorted[!is.na(sorted$log2FoldChange),]
genes <- getBM(attributes=c('external_gene_name','ensembl_gene_id'),
filters=c('ensembl_gene_id'),
values=rownames(sorted),
mart=ensembl)
genes
genes$external_gene_name
sorted
Revert(genes$external_gene_name)
genes$external_gene_name[::-1]
genes$external_gene_name
rev(genes$external_gene_name)
library(circlize)
install.packages('circlize')
library(circlize)
pwd
getwd()
if (getwd()!='/Users/birobalint/Documents/Projects/numt_mining/code/mice/'){
setwd('/Users/birobalint/Documents/Projects/numt_mining/code/mice/')
}
getwd()
print(getwd())
read.csv('../../data/mm_mt_annotation.bed')
read.csv('../../data/mm_mt_annotation.bed',sep = '\t')
read.csv('../../data/mm_mt_annotation.bed',sep = '\t',header=F)
mt_annotation <- read.csv('../../data/mm_mt_annotation.bed',sep = '\t',header=F)
names(mt_annotation) <- c('mt','start','end','name','sig','strand')
mt_annotation
ranges <- mt_annotation$end-mt_annotation$start
ranges
name(ranges) <- mt_annotation$name
ranges <- mt_annotation$end-mt_annotation$start
names(ranges) <- mt_annotation$name
ranges
circos.initialize(ranges,x=names(ranges))
ranges
cbind(c(ranges,mt_annotation$name))
ranges <- mt_annotation$end-mt_annotation$start
cbind(c(ranges,mt_annotation$name))
cbind(ranges,mt_annotation$name)
cbind(names <- mt_annotation$name,size <- ranges)
ranges <- mt_annotation$end-mt_annotation$start
cbind(names <- mt_annotation$name,size <- ranges)
mt_ranges <- cbind(names <- mt_annotation$name,size <- ranges)
mt_ranges
names(mt_ranges) <- c('name','size')
mt_ranges
colnames(mt_ranges) <- c('name','size')
mt_ranges
ranges <- mt_annotation$end-mt_annotation$start
mt_ranges <- cbind(names <- mt_annotation$name,size <- ranges)
colnames(mt_ranges) <- c('name','size')
mt_ranges
mt_ranges$size
ranges <- mt_annotation$end-mt_annotation$start
names(ranges) <- mt_annotation$name
ranges
circos.initialize(ranges)
n = 1000
df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
df
circos.initialize(names(ranges),x=ranges)
ranges
names(ranges)
ranges
circos.par("track.height" = 0.1)
circos.initialize(mt_annotation$name,
x=mt_annotation$end-mt_annotation$start)
mt_annotation$name
mt_annotation$end-mt_annotation$start
circos.par("track.height" = 0.1)
circos.initialize(df$sectors, x = df$x)
circos.par("track.height" = 0.1)
circos.initialize(df$sectors, x = df$x)
circos.par("track.height" = 0.1)
circos.initialize(df$sectors, x = df$x)
circos.track(df$sectors, y = df$y,
panel.fun = function(x, y) {
circos.text(CELL_META$xcenter,
CELL_META$cell.ylim[2] + mm_y(5),
CELL_META$sector.index)
circos.axis(labels.cex = 0.6)
})
df
df
df$sectors
